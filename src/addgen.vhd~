------------------------------------------------
-- Generates address and bank number 
-- for the memory
-- Lorenzo Lastrucci
------------------------------------------------
-- Entity Name       : ADD_GEN
-- Architecture Name : RTL
------------------------------------------------

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use WORK.workpack.all;
use IEEE.math_real.all;

entity ADD_GEN is 
	port( 	N  : in CASCADE(0 to 7);
		Ni : in INDICES;
		SMAX  : in unsigned(2 downto 0);
		bank : out std_logic_vector(3 downto 0);
		address: out std_logic_vector(7 downto 0));
end ADD_GEN;

architecture RTL of ADD_GEN is
	signal N1_rev, N2_shift : unsigned(T-1 downto 0) := (others => '0');
	signal S  : unsigned(bank'length-1 downto 0) := (others => '0');
	signal R,P  : unsigned(address'length-1 downto 0) := (others => '0');
begin
	process(Ni,N)
	begin
		if N(1) > 0 then		
			N2_shift <= shift_right(Ni(1),integer(floor(log2(real(L/to_integer(N(0)))))));
		end if;
	end process;

	gen: for I in 0 to N1_rev'length - 1 generate
 		N1_rev(I) <= Ni(0)(N1_rev'length-1 - I);
	end generate;

	SUM : process(Ni,N)
		variable Stemp : unsigned(bank'length-1 downto 0) := (others => '0');
	begin
		Stemp := (others => '0');
		for I in 1 to to_integer(SMAX) loop
			Stemp := Stemp + Ni(I);
		end loop;
		S <= resize(Stemp,S'length);
	end process SUM;

	PROD : process(Ni,N)
		variable Ptemp : unsigned(address'length-1 downto 0) := to_unsigned(1,address'length);
	begin
		Ptemp := to_unsigned(1,Ptemp'length);
		for I in 2 to to_integer(SMAX) loop
			Ptemp := resize(Ptemp*N(I),Ptemp'length);
		end loop;
		P <= resize(Ptemp*N2_shift,P'length);
	end process PROD;

	SUM2 : process(Ni,N)
		variable Rtemp : unsigned(address'length-1 downto 0) := (others => '0');
		variable Ttemp : unsigned(address'length-1 downto 0) := to_unsigned(1,address'length);
	begin
		Ttemp := to_unsigned(1,Ttemp'length);
		Rtemp := (others => '0');
		for I in 2 to to_integer(SMAX)-1 loop
			for J in I+1 to to_integer(SMAX) loop
				Ttemp := resize(Ttemp*N(J),Ttemp'length);
			end loop;
			Rtemp := Rtemp + resize(Ttemp*Ni(I),Rtemp'length);
			Ttemp := to_unsigned(1,Ttemp'length);
		end loop;
		R <= resize(Rtemp,R'length);
	end process SUM2;

	bank <= std_logic_vector(to_unsigned((to_integer(N1_rev + S) mod L),bank'length));
	address <= std_logic_vector(resize(P + R + Ni(to_integer(SMAX)),address'length));
end RTL;






